Process, services, jobs
See all processes
ps aux
Filter for something (e.g., ssh): check ssh is running
ps aux | grep ssh

ps aux | grep [s]sh
This trick works because grep [s]sh matches "ssh", but the command name won’t include plain "ssh", so it won’t list itself.
👉 Now you can take that PID (e.g., 723) and use it with kill if you ever need to stop/restart ssh.

SSH = the client (sender) → runs on your local machine (your laptop/terminal). You use it to initiate a connection.
SSHD = the daemon (receiver) → runs on the remote machine (like your EC2). It sits there listening on port 22, waiting for SSH clients to connect.
So the flow looks like this:
Your terminal (ssh)  ---->  Internet  ---->  EC2 server (sshd on port 22)
That’s why you always type something like:
ssh ubuntu@<server-ip>
👉 Your ssh client talks to the sshd daemon running on the server.
Remember:
If sshd stops on your EC2 → you lose the ability to connect (you’ll be locked out).

⚠️ Pro tip: If you ever edit /etc/ssh/sshd_config, don’t close your current SSH session until you test with a new one — otherwise, a wrong config will lock you out.
Live Process Monitoring
top or htop
shows the processes inside Linux
——press q to quit

ps aux | grep sleep 
used to find if any process named sleep is currently running

to find and manage a process by name like sleep, ssh, nginx, java etc

ps aux → lists all running processes on the system
| → sends (pipes) that list to the next command
grep sleep → filters the list and shows only processes containing the word sleep

output will show 
top line → the real sleep process (PID 1324)
will contain line → the grep itself (ignore it)

sleep 1000 &                  --a process sleep that will run in background for 1000 seconds

& means in background 
shell gives a prompt like
[1] 1234
--> [1] is the job number
--> 1234 is the PID

check it
ps aux | grep sleep

will give a pid,
 can use it to kill that 


Instead of ps aux | grep, can also try:
pgrep <name> → shows only the PIDs.
pkill <name> → directly kills the process


See background jobs

jobs

shows running processes with job id
[1]+ Running sleep 100 &

Bring it to foreground
fg %1                  --using the job number here

Now shell is stuck again as sleep is running in foreground

Stop it with ctrl + Z

this pauses(suspends) the process

To Resume it in bachground

bg %1  --use job number
now it continues running
check with jobs


Kill the job

1. using pid
kill -9 1234

2. using by name
killall sleep

3. kill %1

Note : sleep is the safest dummy process to play with fg/bg job control.

SERVICES
systemctl  →  talks to systemd  →  manages services like ssh, nginx, mysql

systemctl IS A command line tool that interacts with systemd
systemd is the init system (the very first process started when Linux boots

services are processes running in the background
ex ssh is actual running process

Think Of It like:-
systemd = Boss
systemctl = Phone you use to call the boss
ssh/nginx/etc. = Workers


Check service status
   systemctl status ssh

Start a service (immediately run it)
   sudo systemctl start nginx

Stop a service (immediately stop it)
   sudo systemctl stop nginx

Enable a service at boot (auto-start on reboot)
   sudo systemctl enable nginx

👉 Disable a service (don’t auto-start on reboot)
   sudo systemctl disable nginx


⚡ Extra useful commands:
Restart a service:
   sudo systemctl restart nginx

Reload configuration (without full restart):
   sudo systemctl reload nginx

Check if service is enabled at boot:
   systemctl is-enabled nginx
